"""users related tables migration

Revision ID: db418831f852
Revises: add_superadmin_constraint
Create Date: 2025-06-29 22:41:20.366764

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import ProgrammingError
from infrastructure.db.models.user_model import GUID

# revision identifiers, used by Alembic.
revision: str = 'db418831f852'
down_revision: Union[str, None] = 'add_superadmin_constraint'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    bind = op.get_bind()
    inspector = sa.inspect(bind)

    # ### commands auto generated by Alembic - please adjust! ###
    # Ensure the 'shared' schema exists before creating tables in it
    op.execute("CREATE SCHEMA IF NOT EXISTS shared")

    if not inspector.has_table("activity_logs"):
        op.create_table('activity_logs',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('user_id', sa.UUID(), nullable=False),
            sa.Column('tenant_id', sa.UUID(), nullable=True),
            sa.Column('activity_type', sa.String(length=100), nullable=False),
            sa.Column('activity_metadata', sa.Text(), nullable=True),
            sa.Column('ip_address', sa.String(length=45), nullable=True),
            sa.Column('user_agent', sa.Text(), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
            sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )

    if not inspector.has_table("email_verifications"):
        op.create_table('email_verifications',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('user_id', GUID(), nullable=False),
            sa.Column('token', sa.String(), nullable=False),
            sa.Column('sent_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('is_verified', sa.Boolean(), nullable=False),
            sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('token')
        )

    if not inspector.has_table("invitations"):
        op.create_table('invitations',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('tenant_id', GUID(), nullable=False),
            sa.Column('email', sa.String(length=255), nullable=False),
            sa.Column('role', sa.String(length=50), nullable=False),
            sa.Column('token', sa.String(length=255), nullable=False),
            sa.Column('invited_by_id', GUID(), nullable=False),
            sa.Column('organization_name', sa.String(length=255), nullable=True),
            sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('is_used', sa.Boolean(), nullable=False),
            sa.Column('used_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('invitations', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_invitations_email'), ['email'], unique=False)
            batch_op.create_index(batch_op.f('ix_invitations_token'), ['token'], unique=True)

    if not inspector.has_table("profile_update_requests"):
        op.create_table('profile_update_requests',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('user_id', GUID(), nullable=False),
            sa.Column('requested_by_id', GUID(), nullable=False),
            sa.Column('requested_changes', sa.JSON(), nullable=False),
            sa.Column('status', sa.String(length=20), nullable=False),
            sa.Column('reason', sa.Text(), nullable=True),
            sa.Column('approved_by_id', GUID(), nullable=True),
            sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['requested_by_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('profile_update_requests', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_profile_update_requests_user_id'), ['user_id'], unique=False)

    if not inspector.has_table("refresh_tokens"):
        op.create_table('refresh_tokens',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('user_id', GUID(), nullable=False),
            sa.Column('token_hash', sa.String(length=255), nullable=False),
            sa.Column('jti', sa.String(length=255), nullable=False),
            sa.Column('device_info', sa.Text(), nullable=True),
            sa.Column('ip_address', sa.String(length=45), nullable=True),
            sa.Column('user_agent', sa.Text(), nullable=True),
            sa.Column('is_revoked', sa.Boolean(), nullable=False),
            sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_refresh_tokens_jti'), ['jti'], unique=True)
            batch_op.create_index(batch_op.f('ix_refresh_tokens_token_hash'), ['token_hash'], unique=True)
            batch_op.create_index(batch_op.f('ix_refresh_tokens_user_id'), ['user_id'], unique=False)

    if not inspector.has_table("login_activity"):
        op.create_table('login_activity',
            sa.Column('id', sa.UUID(), nullable=False),
            sa.Column('user_id', sa.UUID(), nullable=False),
            sa.Column('login_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('logout_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('ip_address', sa.String(length=45), nullable=True),
            sa.Column('user_agent', sa.String(length=512), nullable=True),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('login_activity', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_login_activity_user_id'), ['user_id'], unique=False)

    if not inspector.has_table("oauth_providers", schema="shared"):
        op.create_table('oauth_providers',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('user_id', GUID(), nullable=False),
            sa.Column('provider', sa.String(), nullable=False),
            sa.Column('provider_user_id', sa.String(), nullable=False),
            sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            schema='shared'
        )

    # Drop the index if it exists (outside of batch_op context)
    try:
        op.drop_index('idx_users_single_superadmin', table_name='users', postgresql_where=sa.text("((role)::text = 'super_admin'::text)"))
    except ProgrammingError:
        # Index does not exist
        pass

    # ### end Alembic commands ###


def downgrade() -> None:
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_users_single_superadmin', ['role'], unique=True, postgresql_where="((role)::text = 'super_admin'::text)")

    if inspector.has_table("oauth_providers", schema="shared"):
        op.drop_table('oauth_providers', schema='shared')
        
    if inspector.has_table("login_activity"):
        with op.batch_alter_table('login_activity', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_login_activity_user_id'))
        op.drop_table('login_activity')

    if inspector.has_table("refresh_tokens"):
        with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_refresh_tokens_user_id'))
            batch_op.drop_index(batch_op.f('ix_refresh_tokens_token_hash'))
            batch_op.drop_index(batch_op.f('ix_refresh_tokens_jti'))
        op.drop_table('refresh_tokens')

    if inspector.has_table("profile_update_requests"):
        with op.batch_alter_table('profile_update_requests', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_profile_update_requests_user_id'))
        op.drop_table('profile_update_requests')

    if inspector.has_table("invitations"):
        with op.batch_alter_table('invitations', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_invitations_token'))
            batch_op.drop_index(batch_op.f('ix_invitations_email'))
        op.drop_table('invitations')

    if inspector.has_table("email_verifications"):
        op.drop_table('email_verifications')

    if inspector.has_table("activity_logs"):
        op.drop_table('activity_logs')
    # ### end Alembic commands ###
